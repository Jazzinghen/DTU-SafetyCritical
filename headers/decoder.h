#ifndef DECODER_H_INCLUDED
#define DECODER_H_INCLUDED

#include <stdint.h>
#include "utils.h"

/*!\brief	This is the function used to decode files
 *
 * \param	src:	path to the source file
 * \param	dst:	path to the destination file
 * \param   mode: 	GOLAY_24 or GOLAY_23
 *
 * \retval	zero if file decoding was successful.
 */
uint8_t DecodeFile (char *src, char *dst, uint8_t mode);

/*!\brief	This function decode Golay CodeWords by using lookup tables
 *
 * \param	Parity mode: GOLAY_24 or GOLAY_23
 * \param	Pointer to a codeword
 * \param   Pointer to a decoding lookup table
 *
 */
void DecodeLT (uint8_t mode, GolayCW *CodeWord, uint32_t *LookupTable);

/** \brief Function used to check whether a Golay Codeword is correct or not.
 *
 *  It can be used to check whether there have been errors and, by definition, can
 *  detect up to 6 bits of errors and any number of odd bits of error, in any pattern.
 *
 *  It has been designed to work with both 23 Bits and 24 Bits Golay CodeWords.
 */
uint8_t ErrorCheck (uint8_t parity_mode, GolayCW *codeWord);

/** \brief This function used to correct a Golay Codeword.
 *
 *  If there are less than 4 wrong bits, in
 *  any pattern, then this function can detect and fix the error. If there are more errors, then
 *  the function will return a correct Golay Codeword but there is a great probability that
 *  it won't be the original one.
 *
 *  It has beed designed to work with both 23 and 24 Bits version of Golay CodeWords, we have
 *  just to ignore the Parity bit in the case of 23 bits.
 */
uint8_t Correction (uint8_t parity_mode, GolayCW *codeWord);

/** \brief Function used to compute the Lookup Table for the decoding.
 *
 *  The idea is simple: we generate the position of all the possible errors (up to 3 bits, however, since
 *  over that quantity it's not possible to do a proper correction) and then we store them in the
 *  Lookup Table using the syndrome generated by the errors as index. These are stored in an array of
 *  Unsigned 32-bit integers.
 *
 *  This function checks also if there is already a Lookup Table File. If this is the case it loads
 *  the Lookup Table in the array. On the other hand, if the file does not exist, then the Lookup Table
 *  is computed and stored both in an external file and in the array.
 *
 *  Bear in mind that it doesn't check whether the file has a correct Lookup Table or not, so if there's
 *  any suspicion that the file is wrong/corrupted simply eliminate it and the function will generate a new
 *  one.
 */
size_t ComputeDLT (uint8_t message, uint32_t * LookupTable);

#endif // DECODER_H_INCLUDED
